@page "/login"
@layout MealOrdering.Client.Shared.EmptyLayout

<div class="container">
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
            <div class="card border-0 shadow rounded-3 my-5">
                <div class="card-body">
                    <h5 class="card-title text-center mb-5 fw-light fs-5">Giriş</h5>

                    <EditForm Model="@userLoginRequest" OnValidSubmit="loginProcess">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <input @bind-value="userLoginRequest.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address" />
                        </div>

                        <div class="form-group">
                            <input @bind-value="userLoginRequest.Password" class="form-control form-control-lg" type="password" placeholder="Password" />
                        </div>

                        <div class="form-group">
                            <button type="submit" @onkeypress="KeyHandler" @onkeypress:preventDefault class="btn btn-info btn-block">Login</button>
                        </div>

                    </EditForm>

                </div>

            </div>
        </div>
    </div>
</div>

@code {

    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavManeger { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();

      void KeyHandler(KeyboardEventArgs args)
        {
            if (args.Key == "Enter")
            {
               return;
             }
        }

    private async Task loginProcess()
    {
        var httpReqRes = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);

        if (httpReqRes.IsSuccessStatusCode)
        {
            try
            {
                var res = await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                if (res.Success)
                {

                    await localStorageService.SetItemAsync("token", res.Value.ApiToken);
                    await localStorageService.SetItemAsync("email", res.Value.User.EMailAddress);
                    await localStorageService.SetItemAsync("UserId", res.Value.User.Id.ToString());
                    await localStorageService.SetItemAsync("UserFullName", res.Value.User.FullName);

                    (AuthenticationStateProvider as AuthStateProvider).NotifyUserLogin(res.Value.User.EMailAddress);

                    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);

                    NavManeger.NavigateTo("/");
                }
                else
                {
                    await ModalManager.ShowMessageAsync("Login Error", res.Message);
                }
            }
            catch (Exception ex)
            {
                await ModalManager.ShowMessageAsync("Login Error", ex.Message);
            }
        }

    }

}
